<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.noldangGapseo.dao.DestinationDao">

	<resultMap type="destination" id="desMap"></resultMap>
	<resultMap id="comMap" type="Comment"></resultMap>
	<resultMap id="imgMap" type="destinationImg"></resultMap>

	<!-- 유저들이 작성한 여행지 리스트를 불러온다. -->
	<select id="getUsersDesList" resultMap="desMap">
		SELECT d.destination_id,
		d.destination_name, address, d.reg_date,
		u.nick_name,
		dt.destination_type_name,
		d.contents,
		di.img thumb_nail_img
		FROM destination d , `user` u ,
		destination_type dt, destination_img di
		WHERE d.user_id = u.user_id
		and
		d.destination_type_id = dt.destination_type_id
		and d.destination_id = di.destination_id
		and not d.user_id = 1
		GROUP by d.destination_id
		ORDER BY reg_date desc;
	</select>

	<!-- 놀당의 여행지 리스트를 불러온다. -->
	<select id="getAdminDesList" resultMap="desMap">
		SELECT d.destination_id,
		d.destination_name, address, d.phone, d.contents,
		d.reg_date,
		u.nick_name, dt.destination_type_name,
		di.img thumbNailImg,
		d.latitude,
		d.longitude
		FROM
		destination d , `user` u , destination_type dt, destination_img di
		WHERE d.user_id = u.user_id
		and d.destination_type_id =
		dt.destination_type_id
		and d.user_id = 1
		and d.destination_id =
		di.destination_id
		ORDER BY destination_id ASC;
	</select>

	<!-- 여행지의 상세항목을 불러온다. -->
	<select id="getDes" resultMap="desMap" parameterType="Integer">
		SELECT 	d.destination_id,
				d.destination_name,
				d.contents,
				d.phone,
				d.address,
				dt.destination_type_name,
				dt.destination_type_id,
				u.nick_name,
				l.likes_cnt,
				d.latitude,
				d.longitude,
				d.reg_date,
				d.update_date
		FROM 	destination d ,
				destination_type dt,
				`user` u ,
				(
				SELECT 	COUNT(l.user_id) likes_cnt
				FROM
				likes l
				WHERE l.destination_id = #{desId}
				) l
		WHERE 	d.destination_id = #{desId}
		and 	d.destination_type_id = dt.destination_type_id
		and 	d.user_id = u.user_id;

	</select>

	<!-- 메인페이지 4여행지를 가져온다 -->
	<select id="get4Des" resultMap="desMap">
		select d.destination_id ,
		d.destination_name , di.img thumbNailImg
		from destination d ,
		destination_img di
		WHERE user_id = 1
		and d.destination_id =
		di.destination_id
		order by rand() limit 4;
	</select>

	<!-- 놀당 여행지의 댓글들을 불러온다. -->
	<select id="getNoldangCommentList" resultMap="comMap"
		parameterType="Integer">
		SELECT dc.comment_id, dc.contents , u.nick_name, dc.reg_date
		FROM
		destination_comment dc , `user` u
		where dc.destination_id = #{desId}
		and dc.user_id = u.user_id
		order by dc.reg_date desc;
	</select>


	<!-- 유저가 작성한 여행지의 댓글들을 불러온다. -->
	<select id="getUserCommentList" resultMap="comMap"
		parameterType="Integer">
		SELECT ndc.new_destination_comment_id comment_id,
		ndc.contents, u.nick_name
		FROM new_destination_comment ndc, `user` u
		where ndc.destination_id = #{desId}
		and ndc.user_id = u.user_id
		order by
		ndc.reg_date desc;
	</select>

	<!-- 놀당 여행지 댓글 추가 -->
	<insert id="addNolComment" parameterType="Comment">
		INSERT
		into 	destination_comment (destination_id, user_id, contents)
		values 	(#{destinationId}, #{userId}, #{contents});
	</insert>

	<!-- 유저 여행지 댓글 추가 -->
	<insert id="addUserComment" parameterType="Comment">
		INSERT
		into 	new_destination_comment (destination_id, user_id, contents)
		values 	(#{destinationId}, #{userId}, #{contents});
	</insert>

	<!-- 놀당 여행지 댓글 수정 -->
	<update id="updateNolComment" parameterType="Comment">
		UPDATE 	destination_comment e
		set 	contents = #{contents}
		WHERE 	comment_id = #{commentId}
	</update>

	<!-- 유저 여행지 댓글 수정 -->
	<update id="updateUserComment" parameterType="Comment">
		UPDATE 	new_destination_comment e
		set 	contents = #{contents}
		WHERE 	comment_id = #{commentId}
	</update>

	<!-- 놀당 여행지 댓글 하나 가져온다. -->
	<select id="getNolCom" parameterType="Integer" resultType="String">
		SELECT 	dc.contents
		FROM 	destination_comment dc
		WHERE 	dc.comment_id  = #{commentId}
	</select>

	<!-- 유저 여행지 댓글 하나 가져온다. -->
	<select id="getUserCom" parameterType="Integer" resultType="String">
		SELECT 	dc.contents
		FROM 	new_destination_comment dc
		WHERE 	dc.comment_id  = #{commentId}
	</select>

	<!-- 놀당 여행지 삭제 -->
	<delete id="delNolCom" parameterType="Integer">
		DELETE
		FROM 	destination_comment
		WHERE 	comment_id  = #{commentId}
	</delete>

	<!-- 놀당 여행지 삭제 -->
	<delete id="delUserCom" parameterType="Integer">
		DELETE
		FROM 	new_destination_comment
		WHERE 	comment_id  = #{commentId}
	</delete>

	<!-- 이미지 리스트를 불러온다. -->
	<select id="getImg" resultMap="imgMap" parameterType="Integer">
		SELECT
		di.destination_img_id, di.img
		FROM destination_img di
		WHERE
		di.destination_id = #{desId};
	</select>

	<!-- 유저가 작성한 여행지 리스트를 불러온다. -->
	<select id="getUserDesList" resultMap="desMap" parameterType="Integer">
		SELECT 		d.destination_id,
					d.destination_name,
					dt.destination_type_name,
					lic.likes_cnt,
					com.comments_cnt,
					di.img thumb_nail_img
		FROM 		destination_type dt,
					destination d
		join
					(
					SELECT 		d2.destination_id,
								COUNT(l.destination_id) likes_cnt
					FROM 		destination d2
					left join 	likes l
					on 			d2.destination_id = l.destination_id
					WHERE 		d2.user_id = #{userId}
					group by 	d2.destination_id
					) as lic
		on 			d.destination_id = lic.destination_id
		join
					(
					SELECT 		COUNT(ndc.destination_id) comments_cnt,
								d3.destination_id
					FROM 		destination d3
					left join 	new_destination_comment ndc
					ON 			d3.destination_id = ndc.destination_id
					WHERE 		d3.user_id = #{userId}
					GROUP by 	d3.destination_id
					) as com
		on 			d.destination_id = com.destination_id
		left join 	destination_img di
		ON 			di.destination_id = d.destination_id
		WHERE 		1=1
		and 		d.user_id = #{userId}
		and 		d.destination_type_id = dt.destination_type_id
		group by 	d.destination_id
		order by 	d.reg_date desc
		limit 		#{offset}, #{limit}
	</select>


	<!-- 조원석: 유저여행지 객체 8개씩 받기 -->
	<select id="find8" resultMap="desMap">
		select
   		 d.destination_id,
		d.destination_name,
		di.img
		thumbNailImg,
		(select
		count(*)
		from
		likes
		where destination_id =
		d.destination_id) likesCnt,
		(select
		count(*)
		from
		destination_comment
		where destination_id = d.destination_id) commentsCnt
		from
		destination d
		inner join destination_img di on (d.destination_id =
		di.destination_id)
		where not d.user_id = 1
		group by d.destination_id
		limit #{offset},
		#{rowCount}
	</select>


	<!-- 조원석: 유저여행지 갯수 카운트 -->
	<select id="countAll" resultType="int">
		select 		count(*)
		from 		destination
		where not 	user_id = 1
	</select>


	<!-- 여행지를 작성한다. -->
	<insert id="addDestination" parameterType="Destination"
		keyProperty="destinationId" keyColumn="destination_id"
		useGeneratedKeys="true">
		INSERT
		into destination (user_id, destination_type_id,
		destination_name, phone,
		address, contents)
		values
		(#{userId},#{destinationTypeId},#{destinationName},#{phone},#{address},#{contents})
	</insert>

	<!-- 여행지를 업데이트 한다. -->
	<update id="updateDes" parameterType="Destination">
		UPDATE 	destination
		set 	destination_type_id = #{destinationTypeId},
				destination_name = #{destinationName},
				phone = #{phone},
				address= #{address},
				contents = #{contents}
		WHERE 	destination_id = #{destinationId};
	</update>

	<!-- 여행지를 삭제한다. -->
	<delete id="deleteDes" parameterType="Integer">
		DELETE
		FROM destination
		WHERE destination_id = #{desId}
	</delete>

	<!-- 이미지를 추가한다. -->
	<insert id="addImgList">
		INSERT
		into destination_img (destination_id, img)
		value (#{userId},#{imgName})
	</insert>

	<!-- 이미지 업데이트 -->
	<update id="updateImgList">
		UPDATE destination_img
		set img = #{imgName}
		WHERE
		destination_id = #{destinationId};
	</update>

	<!-- 이미지 삭제 -->
	<delete id="deleteImg">
		DELETE
		FROM destination_img
		WHERE destination_img_id =
		#{imgId}
	</delete>

	<!-- 좋아요 체크 -->
	<select id="checkLike" resultType="Integer">
		SELECT 	user_id
		FROM 	likes
		WHERE 	destination_id = #{desId}
		and 	user_id = #{userId}
	</select>

	<!-- 좋아요 추가 -->
	<insert id="addLike">
		INSERT
		into 	likes (destination_id, user_id)
		values 	(#{desId}, #{userId})
	</insert>

	<!-- 좋아요 삭제 -->
	<delete id="deleteLike">
		DELETE
		FROM 	likes
		WHERE 	destination_id = #{desId}
		and 	user_id = #{userId};
	</delete>

	<!-- 게시글 수 -->
	<select id="userDesCnt" resultType="Integer">
		SELECT 	count(d.destination_id) desCnt
		FROM 	destination d
		WHERE 	d.user_id = #{userId};
	</select>


</mapper>